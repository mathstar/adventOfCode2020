use crate::day::Day;

pub struct Day3 {}

fn count_trees(map:&Vec<Vec<char>>, right:usize, down:usize) -> i64 {
    let mut x = 0;
    let mut y = 0;
    let mut count = 0;
    while y < map.len() {
        let row = map.get(y).unwrap();
        log::debug!("{} {} {}", x, y, row.get(x % row.len()).unwrap());
        if row.get(x % row.len()).unwrap() == &'#' {
            count += 1;
        }
        x += right;
        y += down;
    }
    count
}

impl Day for Day3 {
    fn part1(&self, input: &str) -> String {
        let map = input.split_whitespace().map(|line| line.chars().collect::<Vec<char>>()).collect::<Vec<Vec<char>>>();
        let mut x = 0;
        let mut y = 0;
        let mut count = 0;
        while y < map.len() {
            let row = map.get(y).unwrap();
            log::debug!("{} {} {}", x, y, row.get(x % row.len()).unwrap());
            if row.get(x % row.len()).unwrap() == &'#' {
                count += 1;
            }
            x += 3;
            y += 1;
        }
        count.to_string()
    }

    fn part2(&self, input: &str) -> String {
        let map = input.split_whitespace().map(|line| line.chars().collect::<Vec<char>>()).collect::<Vec<Vec<char>>>();
        (count_trees(&map, 1, 1) *
        count_trees(&map, 3, 1) *
        count_trees(&map, 5, 1) *
        count_trees(&map, 7, 1) *
        count_trees(&map, 1, 2)).to_string()
    }
}

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn part1_test1() {
        assert_eq!(Day3{}.part1("..##.........##.........##.........##.........##.........##.......
#...#...#..#...#...#..#...#...#..#...#...#..#...#...#..#...#...#..
.#....#..#..#....#..#..#....#..#..#....#..#..#....#..#..#....#..#.
..#.#...#.#..#.#...#.#..#.#...#.#..#.#...#.#..#.#...#.#..#.#...#.#
.#...##..#..#...##..#..#...##..#..#...##..#..#...##..#..#...##..#.
..#.##.......#.##.......#.##.......#.##.......#.##.......#.##.....
.#.#.#....#.#.#.#....#.#.#.#....#.#.#.#....#.#.#.#....#.#.#.#....#
.#........#.#........#.#........#.#........#.#........#.#........#
#.##...#...#.##...#...#.##...#...#.##...#...#.##...#...#.##...#...
#...##....##...##....##...##....##...##....##...##....##...##....#
.#..#...#.#.#..#...#.#.#..#...#.#.#..#...#.#.#..#...#.#.#..#...#.#"), "7")
    }

    #[test]
    fn part2_test1() {
        assert_eq!(Day3{}.part2("..##.........##.........##.........##.........##.........##.......
#...#...#..#...#...#..#...#...#..#...#...#..#...#...#..#...#...#..
.#....#..#..#....#..#..#....#..#..#....#..#..#....#..#..#....#..#.
..#.#...#.#..#.#...#.#..#.#...#.#..#.#...#.#..#.#...#.#..#.#...#.#
.#...##..#..#...##..#..#...##..#..#...##..#..#...##..#..#...##..#.
..#.##.......#.##.......#.##.......#.##.......#.##.......#.##.....
.#.#.#....#.#.#.#....#.#.#.#....#.#.#.#....#.#.#.#....#.#.#.#....#
.#........#.#........#.#........#.#........#.#........#.#........#
#.##...#...#.##...#...#.##...#...#.##...#...#.##...#...#.##...#...
#...##....##...##....##...##....##...##....##...##....##...##....#
.#..#...#.#.#..#...#.#.#..#...#.#.#..#...#.#.#..#...#.#.#..#...#.#"), "336")
    }
}
